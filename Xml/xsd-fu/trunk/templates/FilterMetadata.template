{% def indexes_string(indexes) %}${", ".join(indexes)}{% end %}\
\
{% def indexes_name_string(indexes) %}${", ".join([v.replace('int ', '') for v in indexes])}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}int ${index_name_string(name)}{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)})
	{
{% if prop.javaType == "String" %}\
		${prop.javaArgumentName} = filter? DataTools.sanitize(${prop.javaArgumentName}) : ${prop.javaArgumentName};
{% end %}\
		store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.javaArgumentName}, ${indexes_name_string(indexes)}, ${index_name_string(prop.name)});
	}
{% end %}\
{% when len(indexes) > 0 %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName}, ${indexes_string(indexes)})
	{
{% if prop.javaType == "String" %}\
		${prop.javaArgumentName} = filter? DataTools.sanitize(${prop.javaArgumentName}) : ${prop.javaArgumentName};
{% end %}\
		store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.javaArgumentName}, ${indexes_name_string(indexes)});
	}
{% end %}\
{% otherwise %}\
	public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.metadataStoreType} ${prop.javaArgumentName})
	{
{% if prop.javaType == "String" %}\
		${prop.javaArgumentName} = filter? DataTools.sanitize(${prop.javaArgumentName}) : ${prop.javaArgumentName};
{% end %}\
		store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}${prop.name}(${prop.javaArgumentName});
	}
{% end %}\
{% end %}\
{% end %}\
\
{% python
	def parent_object(name):
		return model.getObjectByName(parents[name].keys()[0])

	def is_abstract(name):
		o = model.getObjectByName(name)
		if o is not None and \
		   (o.isAbstract or o.isAbstractProprietary):
			return True
		return False

	def is_parent_abstract(name):
		parent = parent_object(name)
		if parent is not None and \
		   (parent.isAbstract or parent.isAbstractProprietary):
			return True
		return False

	def sorted_properties(o):
		return sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name))

	def accessor_string(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		return accessor_string_complex(name, max_occurs, level)['accessor']

	def accessor_string_complex(name, max_occurs, level):
		"""Makes a Java method accessor string from an index name."""
		to_return = {'level': level, 'name': name, 'max_occurs': max_occurs}
		if max_occurs == 1:
			to_return['accessor'] = "get%s()" % (name)
			return to_return
		if name[:2].isupper():
			to_return['accessor'] = "get%s(%sIndex)" % (name, name)
			return to_return
		to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
		return to_return

	def accessor(name, parent, prop, func=accessor_string):
		results = dict()
		fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
		if parent not in results.keys():
			raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		if len(results.keys()) == 0:
			raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
		return results[parent]
%}
\
\
/*
 * loci.formats.meta.FilterMetadata
 *
 *-----------------------------------------------------------------------------
 *
 *  Copyright (C) 2005-@year@ Open Microscopy Environment
 *      Massachusetts Institute of Technology,
 *      National Institutes of Health,
 *      University of Dundee,
 *      University of Wisconsin-Madison
 *
 *
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *-----------------------------------------------------------------------------
 */

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE.  DO NOT MODIFY.
 * Created by ${fu.user} via xsd-fu on ${fu.date}
 *
 *-----------------------------------------------------------------------------
 */

package loci.formats.meta;

import loci.common.DataTools;

import ome.xml.model.enums.*;
import ome.xml.model.primitives.*;

/**
 * An implementation of {@link MetadataStore} that removes unprintable
 * characters from metadata values before storing them in a delegate
 * MetadataStore.
 *
 * <dl><dt><b>Source code:</b></dt>
 * <dd><a href="https://skyking.microscopy.wisc.edu/trac/java/browser/trunk/components/bio-formats/src/loci/formats/meta/FilterMetadata.java">Trac</a>,
 * <a href="https://skyking.microscopy.wisc.edu/svn/java/trunk/components/bio-formats/src/loci/formats/meta/FilterMetadata.java">SVN</a></dd></dl>
 *
 * @author Melissa Linkert melissa at glencoesoftware.com
 * @author Curtis Rueden ctrueden at wisc.edu
 */
public class FilterMetadata implements MetadataStore
{
	// -- Fields --

	private MetadataStore store;
	private boolean filter;

	// -- Constructor --

	public FilterMetadata(MetadataStore store, boolean filter)
	{
		this.store = store;
		this.filter = filter;
	}

	// -- MetadataStore API methods --

	/* @see MetadataStore#createRoot() */
	public void createRoot()
	{
		store.createRoot();
	}

	/* @see MetadataStore#getRoot() */
	public Object getRoot()
	{
		return store.getRoot();
	}

	/* @see MetadataStore#setRoot(Object) */
	public void setRoot(Object root)
	{
		store.setRoot(root);
	}

	/* @see MetadataStore#setUUID(String) */
	public void setUUID(String uuid)
	{
		store.setUUID(uuid);
	}

	// -- AggregateMetadata API methods --

	// -- Entity storage (manual definitions) --

	public void setPixelsBinDataBigEndian(Boolean bigEndian, int imageIndex, int binDataIndex)
	{
		store.setPixelsBinDataBigEndian(bigEndian, imageIndex, binDataIndex);
	}

	public void setMaskBinData(byte[] binData, int ROIIndex, int shapeIndex)
	{
		store.setMaskBinData(binData, ROIIndex, shapeIndex);
	}

	// -- Entity storage (code generated definitions) --

{% for o in sorted(model.objects.values(), lambda x, y: cmp(x.name, y.name)) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.javaType != 'Object' %}\
	// Element's text data
	// ${repr(indexes[o.name])}
	public void set${o.name}Value(${o.javaType} value, ${indexes_string(indexes[o.name].items()[0][1])})
	{
{% if o.javaType == "String" %}\
		value = filter? DataTools.sanitize(value) : value;
{% end %}\
		store.set${o.name}Value(value, ${indexes_name_string(indexes[o.name].items()[0][1])});
	}

{% end %}\
{% if parents[o.name] is not None and not o.isAbstract and not o.isAbstractProprietary %}\
	//
	// ${o.name} property storage
	//
	// ${repr(parents[o.name])}
	// Is multi path? ${is_multi_path[o.name]}

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
	// ${prop.minOccurs}:${prop.maxOccurs}
	// Is multi path? ${is_multi_path[o.name]}
	// Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.name].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive %}\
	// Ignoring ${prop.name} of parent abstract type
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
	// ${prop.name} accessor from parent ${k}
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(o.properties.values() + o.baseObjectProperties, lambda x, y: cmp(x.name, y.name)) %}\
{% choose %}\
{% when prop.isBackReference %}\
	// Ignoring ${prop.name} back reference
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() %}\
	// Ignoring ${prop.name} element, complex property
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.name].items() %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
}
